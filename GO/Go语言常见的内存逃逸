# 什么是内存逃逸?
​函数的内存默认是在栈上进行分配,每一个函数都会分配一个栈帧,在函数运行结束进行消费,如果变量在函数运行结束后没有进行回收,那么内存将重新分配,分配到堆中,但是堆的内存是需要GC去清理的,清理的时候对函数运行有影响,这个现象叫内存逃逸.

# 逃逸机制
1. 若果函数外部没有引用,优先放在栈中
2. 如果函数外部存在引用,则必然放在堆中
3. ​如果栈上放不下,则必定放在堆中


# 常见的几种内存逃逸
1. 返回值是指针(指针逃逸)
2. 栈空间不足,Go语言栈默认大小为2K
3. 闭包 